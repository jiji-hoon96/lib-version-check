name: Deploy to NPM

on:
  push:
    branches:
      - main
    paths-ignore:
      - '**.md'
      - '.github/**'
      - '!.github/workflows/deploy.yml'

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: npm ci

      - name: Run Biome checks
        run: npm run format && npm run lint

  version-and-publish:
    name: Version and Publish
    needs: lint
    runs-on: ubuntu-latest
    permissions:
      contents: write
      id-token: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          registry-url: 'https://registry.npmjs.org'

      - name: Install dependencies
        run: npm ci

      - name: Configure Git
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"

      - name: Auto-increment version
        id: version-update
        run: |
          # 현재 버전 가져오기
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "Current version: $CURRENT_VERSION"
          
          # 패치 버전 증가 (예: 1.3.1 -> 1.3.2)
          npm version patch --no-git-tag-version
          
          # 업데이트된 버전 가져오기
          NEW_VERSION=$(node -p "require('./package.json').version")
          echo "New version: $NEW_VERSION"
          
          # 결과 저장
          echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
          
          # 마지막 태그로부터 현재까지의 커밋 메시지 가져오기
          COMMIT_LOG=$(git log $(git describe --tags --abbrev=0 2>/dev/null || echo HEAD~10)..HEAD --pretty=format:"- %s" | grep -v "Bump version" | grep -v "Merge")
          echo "commit_log<<EOF" >> $GITHUB_OUTPUT
          echo "$COMMIT_LOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Check if tag already exists
        id: check_tag
        run: |
          NEW_VERSION="${{ steps.version-update.outputs.version }}"
          if git rev-parse "v$NEW_VERSION" >/dev/null 2>&1; then
            echo "Tag v$NEW_VERSION already exists"
            echo "tag_exists=true" >> $GITHUB_OUTPUT
          
            # If tag exists, increment patch version again
            npm version patch --no-git-tag-version
            NEW_VERSION=$(node -p "require('./package.json').version")
            echo "New incremented version: $NEW_VERSION"
            echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          else
            echo "tag_exists=false" >> $GITHUB_OUTPUT
            echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          fi

      - name: Update CHANGELOG.md
        run: |
          # Use the possibly incremented version if tag existed
          if [[ "${{ steps.check_tag.outputs.tag_exists }}" == "true" ]]; then
            NEW_VERSION="${{ steps.check_tag.outputs.new_version }}"
          else
            NEW_VERSION="${{ steps.version-update.outputs.version }}"
          fi
          
          COMMIT_LOG="${{ steps.version-update.outputs.commit_log }}"
          DATE=$(date +%Y-%m-%d)
          
          # 변경 로그 항목 생성
          CHANGELOG_ENTRY="## [$NEW_VERSION] - $DATE\n"
          
          # 커밋 로그를 기능별로 분류
          FEATURES=$(echo "$COMMIT_LOG" | grep -i "feat\|feature\|add" || echo "")
          FIXES=$(echo "$COMMIT_LOG" | grep -i "fix\|bug\|issue" || echo "")
          REFACTORS=$(echo "$COMMIT_LOG" | grep -i "refactor" || echo "")
          OTHERS=$(echo "$COMMIT_LOG" | grep -v -i "feat\|feature\|add\|fix\|bug\|issue\|refactor" || echo "")
          
          # 기능 추가 섹션
          if [ ! -z "$FEATURES" ]; then
            CHANGELOG_ENTRY="${CHANGELOG_ENTRY}### Added\n$FEATURES\n\n"
          fi
          
          # 버그 수정 섹션
          if [ ! -z "$FIXES" ]; then
            CHANGELOG_ENTRY="${CHANGELOG_ENTRY}### Fixed\n$FIXES\n\n"
          fi
          
          # 리팩토링 섹션
          if [ ! -z "$REFACTORS" ]; then
            CHANGELOG_ENTRY="${CHANGELOG_ENTRY}### Changed\n$REFACTORS\n\n"
          fi
          
          # 기타 변경 섹션
          if [ ! -z "$OTHERS" ]; then
            CHANGELOG_ENTRY="${CHANGELOG_ENTRY}### Other\n$OTHERS\n\n"
          fi
          
          # CHANGELOG.md 파일 업데이트
          if [ -f CHANGELOG.md ]; then
            # 기존 파일이 있으면 새 항목을 상단에 추가
            # 개행 문자를 올바르게 처리
            echo -e "# Changelog\n\n$CHANGELOG_ENTRY" > changelog_new.md
            cat CHANGELOG.md | sed '1,2d' >> changelog_new.md
            mv changelog_new.md CHANGELOG.md
          else
            # 파일이 없으면 새로 생성
            echo -e "# Changelog\n\n$CHANGELOG_ENTRY" > CHANGELOG.md
          fi
          
          # 변경된 파일 커밋
          git add CHANGELOG.md package.json
          git commit -m "Update CHANGELOG.md and bump version to $NEW_VERSION [skip ci]"
          git tag "v$NEW_VERSION"
          
          # 최종 사용할 버전 출력
          echo "final_version=$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: Push changes
        run: git push && git push --tags

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.update_changelog.outputs.final_version || steps.check_tag.outputs.new_version || steps.version-update.outputs.version }}
          release_name: Release v${{ steps.update_changelog.outputs.final_version || steps.check_tag.outputs.new_version || steps.version-update.outputs.version }}
          draft: false
          prerelease: false
          body: |
            See [CHANGELOG.md](https://github.com/jiji-hoon96/lib-version-check/blob/main/CHANGELOG.md) for details.

      - name: Publish to NPM
        run: npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}